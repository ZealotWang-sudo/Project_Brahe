//------------------------------------------------------------------------------ -
//MRTK - Quest - Online 2
//https ://github.com/provencher/MRTK-Quest-Online
//------------------------------------------------------------------------------ -
//
//MIT License
//
//Copyright(c) 2020 Eric Provencher
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files(the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions :
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//------------------------------------------------------------------------------ -


using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class HandSyncRealtimeModel
{
    [RealtimeProperty(1, true)]
    bool _isHandTrackingActive;

    [RealtimeProperty(2, false)]
    bool _isRightHandTrackingReliable;

    [RealtimeProperty(3, false)]
    bool _isLeftHandTrackingReliable;

    [RealtimeProperty(4, false)]
    float _rightGripIntensity;

    [RealtimeProperty(5, false)]
    float _leftGripIntensity;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class HandSyncRealtimeModel : RealtimeModel {
    public bool isRightHandTrackingReliable {
        get {
            return _isRightHandTrackingReliableProperty.value;
        }
        set {
            if (_isRightHandTrackingReliableProperty.value == value) return;
            _isRightHandTrackingReliableProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public bool isLeftHandTrackingReliable {
        get {
            return _isLeftHandTrackingReliableProperty.value;
        }
        set {
            if (_isLeftHandTrackingReliableProperty.value == value) return;
            _isLeftHandTrackingReliableProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public float rightGripIntensity {
        get {
            return _rightGripIntensityProperty.value;
        }
        set {
            if (_rightGripIntensityProperty.value == value) return;
            _rightGripIntensityProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public float leftGripIntensity {
        get {
            return _leftGripIntensityProperty.value;
        }
        set {
            if (_leftGripIntensityProperty.value == value) return;
            _leftGripIntensityProperty.value = value;
            InvalidateUnreliableLength();
        }
    }
    
    public bool isHandTrackingActive {
        get {
            return _isHandTrackingActiveProperty.value;
        }
        set {
            if (_isHandTrackingActiveProperty.value == value) return;
            _isHandTrackingActiveProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public enum PropertyID : uint {
        IsHandTrackingActive = 1,
        IsRightHandTrackingReliable = 2,
        IsLeftHandTrackingReliable = 3,
        RightGripIntensity = 4,
        LeftGripIntensity = 5,
    }
    
    #region Properties
    
    private ReliableProperty<bool> _isHandTrackingActiveProperty;
    
    private UnreliableProperty<bool> _isRightHandTrackingReliableProperty;
    
    private UnreliableProperty<bool> _isLeftHandTrackingReliableProperty;
    
    private UnreliableProperty<float> _rightGripIntensityProperty;
    
    private UnreliableProperty<float> _leftGripIntensityProperty;
    
    #endregion
    
    public HandSyncRealtimeModel() : base(null) {
        _isHandTrackingActiveProperty = new ReliableProperty<bool>(1, _isHandTrackingActive);
        _isRightHandTrackingReliableProperty = new UnreliableProperty<bool>(2, _isRightHandTrackingReliable);
        _isLeftHandTrackingReliableProperty = new UnreliableProperty<bool>(3, _isLeftHandTrackingReliable);
        _rightGripIntensityProperty = new UnreliableProperty<float>(4, _rightGripIntensity);
        _leftGripIntensityProperty = new UnreliableProperty<float>(5, _leftGripIntensity);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _isHandTrackingActiveProperty.UnsubscribeCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _isHandTrackingActiveProperty.WriteLength(context);
        length += _isRightHandTrackingReliableProperty.WriteLength(context);
        length += _isLeftHandTrackingReliableProperty.WriteLength(context);
        length += _rightGripIntensityProperty.WriteLength(context);
        length += _leftGripIntensityProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _isHandTrackingActiveProperty.Write(stream, context);
        writes |= _isRightHandTrackingReliableProperty.Write(stream, context);
        writes |= _isLeftHandTrackingReliableProperty.Write(stream, context);
        writes |= _rightGripIntensityProperty.Write(stream, context);
        writes |= _leftGripIntensityProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.IsHandTrackingActive: {
                    changed = _isHandTrackingActiveProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.IsRightHandTrackingReliable: {
                    changed = _isRightHandTrackingReliableProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.IsLeftHandTrackingReliable: {
                    changed = _isLeftHandTrackingReliableProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.RightGripIntensity: {
                    changed = _rightGripIntensityProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.LeftGripIntensity: {
                    changed = _leftGripIntensityProperty.Read(stream, context);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _isHandTrackingActive = isHandTrackingActive;
        _isRightHandTrackingReliable = isRightHandTrackingReliable;
        _isLeftHandTrackingReliable = isLeftHandTrackingReliable;
        _rightGripIntensity = rightGripIntensity;
        _leftGripIntensity = leftGripIntensity;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
